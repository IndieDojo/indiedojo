{"version":3,"sources":["../../../src/internal-plugins/component-page-creator/gatsby-node.js"],"names":["globCB","require","Promise","_","chokidar","systemPath","glob","promisify","createPath","validatePath","exports","createPagesStatefully","options","doneCb","store","boundActionCreators","createPage","deletePage","program","getState","pagesDirectory","posix","join","directory","exts","extensions","map","e","slice","files","forEach","_createPage","file","watch","on","includes","path","push","pages","filter","p","component","page","f","filePath","relative"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,SAASC,eAAf;AACA,IAAMC,UAAUD,mBAAhB;AACA,IAAME,IAAIF,iBAAV;AACA,IAAMG,WAAWH,mBAAjB;AACA,IAAMI,aAAaJ,eAAnB;;AAEA,IAAMK,OAAOJ,QAAQK,SAAR,CAAkBP,MAAlB,CAAb;;AAEA,IAAMQ,aAAaP,wBAAnB;AACA,IAAMQ,eAAeR;;AAErB;AACA;AACA;AACA;AACA;AANqB,CAArB,CAOAS,QAAQC,qBAAR;AAAA,wEAAgC,wBAE9BC,OAF8B,EAG9BC,MAH8B;AAAA,QAC5BC,KAD4B,SAC5BA,KAD4B;AAAA,QACrBC,mBADqB,SACrBA,mBADqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAKtBC,sBALsB,GAKKD,mBALL,CAKtBC,UALsB,EAKVC,UALU,GAKKF,mBALL,CAKVE,UALU;AAMxBC,mBANwB,GAMdJ,MAAMK,QAAN,GAAiBD,OANH;AAOxBE,0BAPwB,GAOPf,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBJ,QAAQK,SAA9B,eAPO;AAQxBC,gBARwB,GAQjBN,QAAQO,UAAR,CAAmBC,GAAnB,CAAuB;AAAA,0BAAQC,EAAEC,KAAF,CAAQ,CAAR,CAAR;AAAA,aAAvB,EAA6CN,IAA7C;;AAEb;AAFa,aARiB;AAAA;AAAA,mBAWZhB,KAAQc,cAAR,cAA+BI,IAA/B,OAXY;;AAAA;AAW1BK,iBAX0B;;AAY9BA,kBAAMC,OAAN,CAAc;AAAA,qBAAQC,YAAYC,IAAZ,EAAkBZ,cAAlB,EAAkCJ,UAAlC,CAAR;AAAA;;AAEd;AAFA,cAGAZ,SACG6B,KADH,CACYb,cADZ,eACoCI,IADpC,QAEGU,EAFH,QAEa,gBAAQ;AACjB,kBAAI,CAAC/B,EAAEgC,QAAF,CAAWN,KAAX,EAAkBO,IAAlB,CAAL,EAA8B;AAC5BL,4BAAYK,IAAZ,EAAkBhB,cAAlB,EAAkCJ,UAAlC;AACAa,sBAAMQ,IAAN,CAAWD,IAAX;AACD;AACF,aAPH,EAQGF,EARH,WAQgB,gBAAQ;AACpB;AACApB,oBAAMK,QAAN,GAAiBmB,KAAjB,CAAuBC,MAAvB,CAA8B;AAAA,uBAAKC,EAAEC,SAAF,KAAgBL,IAArB;AAAA,eAA9B,EAAyDN,OAAzD,CAAiE,gBAAQ;AACvEb,2BAAW,EAAEmB,MAAMM,KAAKN,IAAb,EAAX;AACAP,wBAAQA,MAAMU,MAAN,CAAa;AAAA,yBAAKI,MAAMP,IAAX;AAAA,iBAAb,CAAR;AACD,eAHD;AAID,aAdH,EAeGF,EAfH,UAee;AAAA,qBAAMrB,QAAN;AAAA,aAff;;AAf8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;AAgCA,IAAMkB,cAAc,SAAdA,WAAc,CAACa,QAAD,EAAWxB,cAAX,EAA2BJ,UAA3B,EAA0C;AAC5D;AACA;AACA,MAAI,CAACP,aAAaJ,WAAWgB,KAAX,CAAiBwB,QAAjB,CAA0BzB,cAA1B,EAA0CwB,QAA1C,CAAb,CAAL,EAAwE;AACtE;AACD;;AAED;AACA,MAAMF,OAAO;AACXN,UAAM5B,WAAWY,cAAX,EAA2BwB,QAA3B,CADK;AAEXH,eAAWG;;AAGb;AALa,GAAb,CAMA5B,WAAW0B,IAAX;AACD,CAfD","file":"gatsby-node.js","sourcesContent":["const globCB = require(`glob`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\nconst systemPath = require(`path`)\n\nconst glob = Promise.promisify(globCB)\n\nconst createPath = require(`./create-path`)\nconst validatePath = require(`./validate-path`)\n\n// Path creator.\n// Auto-create pages.\n// algorithm is glob /pages directory for js/jsx/cjsx files *not*\n// underscored. Then create url w/ our path algorithm *unless* user\n// takes control of that page component in gatsby-node.\nexports.createPagesStatefully = async (\n  { store, boundActionCreators },\n  options,\n  doneCb\n) => {\n  const { createPage, deletePage } = boundActionCreators\n  const program = store.getState().program\n  const pagesDirectory = systemPath.posix.join(program.directory, `/src/pages`)\n  const exts = program.extensions.map(e => `${e.slice(1)}`).join(`,`)\n\n  // Get initial list of files.\n  let files = await glob(`${pagesDirectory}/**/?(${exts})`)\n  files.forEach(file => _createPage(file, pagesDirectory, createPage))\n\n  // Listen for new component pages to be added or removed.\n  chokidar\n    .watch(`${pagesDirectory}/**/*.{${exts}}`)\n    .on(`add`, path => {\n      if (!_.includes(files, path)) {\n        _createPage(path, pagesDirectory, createPage)\n        files.push(path)\n      }\n    })\n    .on(`unlink`, path => {\n      // Delete the page for the now deleted component.\n      store.getState().pages.filter(p => p.component === path).forEach(page => {\n        deletePage({ path: page.path })\n        files = files.filter(f => f !== path)\n      })\n    })\n    .on(`ready`, () => doneCb())\n}\nconst _createPage = (filePath, pagesDirectory, createPage) => {\n  // Filter out special components that shouldn't be made into\n  // pages.\n  if (!validatePath(systemPath.posix.relative(pagesDirectory, filePath))) {\n    return\n  }\n\n  // Create page object\n  const page = {\n    path: createPath(pagesDirectory, filePath),\n    component: filePath,\n  }\n\n  // Add page\n  createPage(page)\n}\n"]}