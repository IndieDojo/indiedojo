{"version":3,"sources":["../../src/utils/cache.js"],"names":["Promise","require","low","fs","_","db","directory","exports","initCache","ensureDirSync","process","cwd","env","NODE_ENV","tmpdir","format","serialize","obj","deserialize","JSON","parse","str","mixin","previousState","readFileSync","e","defaults","write","keys","get","resolve","reject","pair","getById","key","value","set","upsert","id","save","debounce","writeFile","getState","noop"],"mappings":";;;;;;;;AAAA,IAAMA,UAAUC,mBAAhB;AACA,IAAMC,MAAMD,gBAAZ;AACA,IAAME,KAAKF,mBAAX;AACA,IAAMG,IAAIH,iBAAV;;AAEA,IAAII,WAAJ;AACA,IAAIC,kBAAJ;AACAC,QAAQC,SAAR,GAAoB,YAAM;AACxBL,KAAGM,aAAH,CAAoBC,QAAQC,GAAR,EAApB;AACA,MAAID,QAAQE,GAAR,CAAYC,QAAZ,WAAJ,EAAqC;AACnCP,gBAAYL,cAAca,MAAd,EAAZ;AACD,GAFD,MAEO;AACLR,gBAAYI,QAAQC,GAAR,oBAAZ;AACD;AACDN,OAAKH,IAAI,IAAJ,EAAU;AACba,YAAQ;AACNC,iBAAW;AAAA,eAAO,yBAAeC,GAAf,CAAP;AAAA,OADL;AAENC,mBAAa;AAAA,eAAOC,KAAKC,KAAL,CAAWC,GAAX,CAAP;AAAA;AAFP;AADK,GAAV,CAAL;AAMAhB,KAAGD,CAAH,CAAKkB,KAAL,CAAWrB,oBAAX;;AAEA,MAAIsB,sBAAJ;AACA,MAAI;AACFA,oBAAgBJ,KAAKC,KAAL,CAAWjB,GAAGqB,YAAH,CAAmBlB,SAAnB,cAAX,CAAhB;AACD,GAFD,CAEE,OAAOmB,CAAP,EAAU;AACV;AACD;;AAED,MAAIF,aAAJ,EAAmB;AACjBlB,OAAGqB,QAAH,CAAYH,aAAZ,EAA2BI,KAA3B;AACD,GAFD,MAEO;AACLtB,OAAGqB,QAAH,CAAY,EAAEE,MAAM,EAAR,EAAZ,EAA0BD,KAA1B;AACD;AACF,CA3BD;;AA6BApB,QAAQsB,GAAR,GAAc;AAAA,SACZ,IAAI7B,OAAJ,CAAY,UAAC8B,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAIC,aAAJ;AACA,QAAI;AACFA,aAAO3B,GAAGwB,GAAH,SAAeI,OAAf,CAAuBC,GAAvB,EAA4BC,KAA5B,EAAP;AACD,KAFD,CAEE,OAAOV,CAAP,EAAU;AACV;AACD;;AAED,QAAIO,IAAJ,EAAU;AACRF,cAAQE,KAAKG,KAAb;AACD,KAFD,MAEO;AACLL;AACD;AACF,GAbD,CADY;AAAA,CAAd;;AAgBAvB,QAAQ6B,GAAR,GAAc,UAACF,GAAD,EAAMC,KAAN;AAAA,SACZ,IAAInC,OAAJ,CAAY,UAAC8B,OAAD,EAAUC,MAAV,EAAqB;AAC/B1B,OAAGwB,GAAH,SAAeQ,MAAf,CAAsB,EAAEC,IAAIJ,GAAN,EAAWC,YAAX,EAAtB,EAA0CR,KAA1C;AACAY;AACAT;AACD,GAJD,CADY;AAAA,CAAd;;AAOA,IAAIS,aAAJ;;AAEA,IAAI7B,QAAQE,GAAR,CAAYC,QAAZ,WAAJ,EAAqC;AACnC0B,SAAOnC,EAAEoC,QAAF,CAAW,YAAM;AACtBrC,OAAGsC,SAAH,CAAgBnC,SAAhB,eAAqC,yBAAeD,GAAGqC,QAAH,EAAf,CAArC;AACD,GAFM,EAEJ,GAFI,CAAP;AAGD,CAJD,MAIO;AACLH,SAAOnC,EAAEuC,IAAT;AACD","file":"cache.js","sourcesContent":["const Promise = require(`bluebird`)\nconst low = require(`lowdb`)\nconst fs = require(`fs-extra`)\nconst _ = require(`lodash`)\n\nlet db\nlet directory\nexports.initCache = () => {\n  fs.ensureDirSync(`${process.cwd()}/.cache/cache`)\n  if (process.env.NODE_ENV === `test`) {\n    directory = require(`os`).tmpdir()\n  } else {\n    directory = process.cwd() + `/.cache/cache`\n  }\n  db = low(null, {\n    format: {\n      serialize: obj => JSON.stringify(obj),\n      deserialize: str => JSON.parse(str),\n    },\n  })\n  db._.mixin(require(`lodash-id`))\n\n  let previousState\n  try {\n    previousState = JSON.parse(fs.readFileSync(`${directory}/db.json`))\n  } catch (e) {\n    // ignore\n  }\n\n  if (previousState) {\n    db.defaults(previousState).write()\n  } else {\n    db.defaults({ keys: [] }).write()\n  }\n}\n\nexports.get = key =>\n  new Promise((resolve, reject) => {\n    let pair\n    try {\n      pair = db.get(`keys`).getById(key).value()\n    } catch (e) {\n      // ignore\n    }\n\n    if (pair) {\n      resolve(pair.value)\n    } else {\n      resolve()\n    }\n  })\n\nexports.set = (key, value) =>\n  new Promise((resolve, reject) => {\n    db.get(`keys`).upsert({ id: key, value }).write()\n    save()\n    resolve(`Ok`)\n  })\n\nlet save\n\nif (process.env.NODE_ENV !== `test`) {\n  save = _.debounce(() => {\n    fs.writeFile(`${directory}/db.json`, JSON.stringify(db.getState()))\n  }, 250)\n} else {\n  save = _.noop\n}\n"]}