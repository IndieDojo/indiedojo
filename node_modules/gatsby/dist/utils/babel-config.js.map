{"version":3,"sources":["../../src/utils/babel-config.js"],"names":["resolvePlugin","pluginName","directory","type","Array","isArray","gatsbyPath","resolve","__dirname","plugin","name","startsWith","pluginInvariantMessage","normalizeConfig","config","normalizedConfig","presets","plugins","forEach","push","preset","normalizedPlugin","findBabelrc","babelrc","readFileSync","join","parse","error","code","findBabelPackage","packageJson","require","babel","module","exports","program","stage","loose","uglify","modules","targets","browsers","browserslist","exclude","unshift","hasOwnProperty","cacheDirectory","modifiedConfig","length","merge","merged","defaultsDeep","babelConfig"],"mappings":"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","file":"babel-config.js","sourcesContent":["/* @flow */\nimport resolve from \"babel-core/lib/helpers/resolve\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport json5 from \"json5\"\nimport _ from \"lodash\"\nimport objectAssign from \"object-assign\"\nimport invariant from \"invariant\"\nimport apiRunnerNode from \"./api-runner-node\"\n\n// TODO update this to store Babelrc config in Redux store.\n\n/**\n * Uses babel-core helpers to resolve the plugin given it's name. It\n * resolves plugins in the following order:\n *\n * 1. Adding babel-type prefix and checking user's local modules\n * 2. Adding babel-type prefix and checking Gatsby's modules\n * 3. Checking users's modules without prefix\n * 4. Checking Gatsby's modules without prefix\n *\n */\nfunction resolvePlugin(pluginName, directory, type) {\n  // When a plugin is specified with options in babelrc, the pluginName contains\n  // the array with [name, options]. In that case we extract the name.\n  pluginName = Array.isArray(pluginName) ? pluginName[0] : pluginName\n\n  const gatsbyPath = path.resolve(__dirname, `..`, `..`)\n  const plugin =\n    resolve(`babel-${type}-${pluginName}`, directory) ||\n    resolve(`babel-${type}-${pluginName}`, gatsbyPath) ||\n    resolve(pluginName, directory) ||\n    resolve(pluginName, gatsbyPath)\n\n  const name = _.startsWith(pluginName, `babel`)\n    ? pluginName\n    : `babel-${type}-${pluginName}`\n  const pluginInvariantMessage = `\n  You are trying to use a Babel plugin or preset which Gatsby cannot find: ${pluginName}\n\n  You can install it using \"npm install --save ${name}\".\n\n  You can use any of the Gatsby provided plugins without installing them:\n    - babel-plugin-add-module-exports\n    - babel-plugin-transform-object-assign\n    - babel-preset-es2015\n    - babel-preset-react\n    - babel-preset-stage-0\n  `\n\n  invariant(plugin !== null, pluginInvariantMessage)\n  return plugin\n}\n\n/**\n * Normalizes a Babel config object to include only absolute paths.\n * This way babel-loader will correctly resolve Babel plugins\n * regardless of where they are located.\n */\nfunction normalizeConfig(config, directory) {\n  const normalizedConfig = {\n    presets: [],\n    plugins: [],\n  }\n\n  const presets = config.presets || []\n  presets.forEach(preset => {\n    normalizedConfig.presets.push(resolvePlugin(preset, directory, `preset`))\n  })\n\n  const plugins = config.plugins || []\n  plugins.forEach(plugin => {\n    let normalizedPlugin\n\n    if (_.isArray(plugin)) {\n      normalizedPlugin = [\n        resolvePlugin(plugin[0], directory, `plugin`),\n        plugin[1],\n      ]\n    } else {\n      normalizedPlugin = resolvePlugin(plugin, directory, `plugin`)\n    }\n\n    normalizedConfig.plugins.push(normalizedPlugin)\n  })\n\n  return objectAssign({}, config, normalizedConfig)\n}\n\n/**\n * Locates a .babelrc in the Gatsby site root directory. Parses it using\n * json5 (what Babel uses). It throws an error if the users's .babelrc is\n * not parseable.\n */\nfunction findBabelrc(directory) {\n  try {\n    const babelrc = fs.readFileSync(path.join(directory, `.babelrc`), `utf-8`)\n    return json5.parse(babelrc)\n  } catch (error) {\n    if (error.code === `ENOENT`) {\n      return null\n    } else {\n      throw error\n    }\n  }\n}\n\n/**\n * Reads the user's package.json and returns the \"babel\" section. It will\n * return undefined when the \"babel\" section does not exist.\n */\nfunction findBabelPackage(directory) {\n  try {\n    // $FlowIssue - https://github.com/facebook/flow/issues/1975\n    const packageJson = require(path.join(directory, `package.json`))\n    return packageJson.babel\n  } catch (error) {\n    if (error.code === `MODULE_NOT_FOUND`) {\n      return null\n    } else {\n      throw error\n    }\n  }\n}\n\n/**\n * Returns a normalized Babel config to use with babel-loader. All of\n * the paths will be absolute so that Babel behaves as expected.\n */\nmodule.exports = async function babelConfig(program, stage) {\n  const { directory } = program\n\n  let babelrc = findBabelrc(directory) || findBabelPackage(directory)\n\n  // If user doesn't have a custom babelrc, add defaults.\n  if (!babelrc) {\n    babelrc = {}\n  }\n  if (!babelrc.plugins) {\n    babelrc.plugins = []\n  }\n  if (!babelrc.presets) {\n    babelrc.presets = []\n  }\n\n  // Add default plugins and presets.\n  ;[\n    [\n      require.resolve(`babel-preset-env`),\n      {\n        loose: true,\n        uglify: true,\n        modules: false,\n        targets: {\n          browsers: program.browserslist,\n        },\n        exclude: [`transform-regenerator`, `transform-es2015-typeof-symbol`],\n      },\n    ],\n    `stage-0`,\n    `react`,\n  ].forEach(preset => {\n    babelrc.presets.push(preset)\n  })\n  ;[`add-module-exports`, `transform-object-assign`].forEach(plugin => {\n    babelrc.plugins.push(plugin)\n  })\n\n  if (stage === `develop`) {\n    babelrc.plugins.unshift(`transform-react-jsx-source`)\n    babelrc.plugins.unshift(`react-hot-loader/babel`)\n  }\n\n  // Always add this plugin so our generated routes\n  // will work regardless of how users export\n  // their components. Yeah for multiple module standards!\n  babelrc.plugins.unshift(`add-module-exports`)\n\n  babelrc.plugins.unshift(require.resolve(`./babel-plugin-extract-graphql`))\n\n  if (!babelrc.hasOwnProperty(`cacheDirectory`)) {\n    babelrc.cacheDirectory = true\n  }\n\n  const normalizedConfig = normalizeConfig(babelrc, directory)\n  let modifiedConfig = await apiRunnerNode(`modifyBabelrc`, { babelrc })\n  if (modifiedConfig.length > 0) {\n    modifiedConfig = _.merge({}, ...modifiedConfig)\n    // Otherwise this means no plugin changed the babel config.\n  } else {\n    modifiedConfig = {}\n  }\n\n  // Merge all together.\n  const merged = _.defaultsDeep(modifiedConfig, normalizedConfig)\n  return merged\n}\n"]}