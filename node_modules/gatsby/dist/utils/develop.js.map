{"version":3,"sources":["../../src/utils/develop.js"],"names":["program","directory","bootstrap","developHtml","catch","console","log","err","process","exit","webpackConfig","port","compilerConfig","devConfig","resolve","compiler","webpack","app","express","use","require","path","heartbeat","graphqlHTTP","schema","store","getState","graphiql","static","__dirname","noInfo","quiet","publicPath","output","proxy","config","prefix","url","req","res","proxiedUrl","originalUrl","pipe","request","next","parsedPath","parsePath","extname","sendFile","cwd","status","end","get","listener","listen","host","e","code","open","address","opn","startServer","rl","_","copyStaticDirectory","setTimeout","rlInterface","createInterface","input","stdin","stdout","on","module","exports","detect","parseInt","_port","error","question","answer","length","match"],"mappings":";;;;;;;;;;;wEA+BA,iBAA2BA,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,qBADR,GACoBD,QAAQC,SAD5B;;AAGE;;AAHF;AAAA,mBAIQC,UAAUF,OAAV,CAJR;;AAAA;AAAA;AAAA,mBAKQG,YAAYH,OAAZ,EAAqBI,KAArB,CAA2B,eAAO;AACtCC,sBAAQC,GAAR,CAAYC,GAAZ;AACAC,sBAAQC,IAAR,CAAa,CAAb;AACD,aAHK,CALR;;AAAA;AAAA;AAAA,mBAU+BC,cAC3BV,OAD2B,EAE3BC,SAF2B,aAI3BD,QAAQW,IAJmB,CAV/B;;AAAA;AAUQC,0BAVR;AAiBQC,qBAjBR,GAiBoBD,eAAeE,OAAf,EAjBpB;AAkBQC,oBAlBR,GAkBmBC,QAAQH,SAAR,CAlBnB;AAoBQI,eApBR,GAoBcC,SApBd;;AAqBED,gBAAIE,GAAJ,CACEC,kCAAkCL,QAAlC,EAA4C;AAC1CT,mBAAK,eAAM,CAAE,CAD6B;AAE1Ce,oCAF0C;AAG1CC,yBAAW,KAAK;AAH0B,aAA5C,CADF;AAOAL,gBAAIE,GAAJ,gBAEEI,YAAY;AACVC,sBAAQC,MAAMC,QAAN,GAAiBF,MADf;AAEVG,wBAAU;AAFA,aAAZ,CAFF;;AAQAV,gBAAIE,GAAJ,CAAQD,QAAQU,MAAR,CAAeC,qBAAf,CAAR;;AAEAZ,gBAAIE,GAAJ,CACEC,kCAAkCL,QAAlC,EAA4C;AAC1Ce,sBAAQ,IADkC;AAE1CC,qBAAO,IAFmC;AAG1CC,0BAAYnB,UAAUoB,MAAV,CAAiBD;AAHa,aAA5C;;AAOF;AARA,cASQE,KA/CV,GA+CoBT,MAAMC,QAAN,GAAiBS,MA/CrC,CA+CUD,KA/CV;;AAgDE,gBAAIA,KAAJ,EAAW;AACDE,oBADC,GACeF,KADf,CACDE,MADC,EACOC,GADP,GACeH,KADf,CACOG,GADP;;AAETpB,kBAAIE,GAAJ,CAAWiB,MAAX,SAAuB,UAACE,GAAD,EAAMC,GAAN,EAAc;AACnC,oBAAMC,aAAaH,MAAMC,IAAIG,WAA7B;AACAH,oBAAII,IAAJ,CAASC,QAAQH,UAAR,CAAT,EAA8BE,IAA9B,CAAmCH,GAAnC;AACD,eAHD;AAID;AACD;AACAtB,gBAAIE,GAAJ,CAAQ,UAACmB,GAAD,EAAMC,GAAN,EAAWK,IAAX,EAAoB;AAC1B,kBAAMC,aAAaC,UAAUR,IAAIG,WAAd,CAAnB;AACA,kBAAII,WAAWE,OAAX,WAA6BF,WAAWE,OAAX,YAAjC,EAAiE;AAC/DR,oBAAIS,QAAJ,CAAgBxC,QAAQyC,GAAR,EAAhB,yBAAmD,eAAO;AACxD,sBAAI1C,GAAJ,EAAS;AACPgC,wBAAIW,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD;AACF,iBAJD;AAKD,eAND,MAMO;AACLP;AACD;AACF;;AAED;AAbA,cAcA3B,IAAImC,GAAJ,MAAa,UAACd,GAAD,EAAMC,GAAN,EAAc;AACzB;AACAA,kBAAIS,QAAJ,CAAgBxC,QAAQyC,GAAR,EAAhB,gBAAwCX,IAAID,GAA5C,EAAmD,eAAO;AACxD,oBAAI9B,GAAJ,EAAS;AACPgC,sBAAIW,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD;AACF,eAJD;AAKD,aAPD;;AASME,oBA/ER,GA+EmBpC,IAAIqC,MAAJ,CAAWtD,QAAQW,IAAnB,EAAyBX,QAAQuD,IAAjC,EAAuC,aAAK;AAC3D,kBAAIC,CAAJ,EAAO;AACL,oBAAIA,EAAEC,IAAF,iBAAJ,EAA6B;AAC3B;AACApD,0BAAQC,GAAR,qCACoCN,QAAQW,IAD5C;AAGD,iBALD,MAKO;AACLN,0BAAQC,GAAR,CAAYkD,CAAZ;AACD;;AAEDhD,wBAAQC,IAAR;AACD,eAXD,MAWO;AACL,oBAAIT,QAAQ0D,IAAZ,EAAkB;AAChB,sBAAMH,OACJF,SAASM,OAAT,GAAmBA,OAAnB,iCAEIN,SAASM,OAAT,GAAmBA,OAHzB;AAIA,sBAAMC,MAAMxC,cAAZ;AACAwC,kCAAcL,IAAd,SAAsBF,SAASM,OAAT,GAAmBhD,IAAzC;AACD;AACF;AACF,aAtBgB,CA/EnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAekD,W;;;;;;;AA9Bf,IAAM3C,UAAUE,kBAAhB;AACA,IAAMG,cAAcH,0BAApB;AACA,IAAMuB,UAAUvB,kBAAhB;AACA,IAAMlB,YAAYkB,uBAAlB;AACA,IAAMJ,UAAUI,kBAAhB;AACA,IAAMV,gBAAgBU,2BAAtB;AACA,IAAM0C,KAAK1C,mBAAX;AACA,IAAM0B,YAAY1B,yBAAlB;AACA,IAAM2C,IAAI3C,iBAAV;;eACkBA,mB;IAAVK,K,YAAAA,K;;AACR,IAAMuC,sBAAsB5C,kCAA5B;AACA,IAAMjB,cAAciB;;AAEpB;AACA;AACA;AAJoB,CAApB,CAKA6C,WAAW,YAAM;AACfD;AACD,CAFD,EAEG,KAFH;;AAIA,IAAME,cAAcJ,GAAGK,eAAH,CAAmB;AACrCC,SAAO5D,QAAQ6D,KADsB;AAErCpC,UAAQzB,QAAQ8D;AAFqB;;AAKvC;AALoB,CAApB,CAMAJ,YAAYK,EAAZ,WAAyB,YAAM;AAC7B/D,UAAQC,IAAR;AACD,CAFD;;AA4GA+D,OAAOC,OAAP,GAAiB,UAACzE,OAAD,EAAkB;AACjC,MAAM0E,SAAStD,sBAAf;AACA,MAAMT,OACJ,OAAOX,QAAQW,IAAf,gBAAmCgE,SAAS3E,QAAQW,IAAjB,EAAuB,EAAvB,CAAnC,GAAgEX,QAAQW,IAD1E;;AAGA+D,SAAO/D,IAAP,EAAa,UAACJ,GAAD,EAAMqE,KAAN,EAAgB;AAC3B,QAAIrE,GAAJ,EAAS;AACPF,cAAQwE,KAAR,CAActE,GAAd;AACAC,cAAQC,IAAR;AACD;;AAED,QAAIE,SAASiE,KAAb,EAAoB;AAClB;AACA,UAAME,qDAAmDnE,IAAnD,qEAAN;;AAEA,aAAOuD,YAAYY,QAAZ,CAAqBA,QAArB,EAA+B,kBAAU;AAC9C,YAAIC,OAAOC,MAAP,KAAkB,CAAlB,IAAuBD,OAAOE,KAAP,CAAa,UAAb,CAA3B,EAAqD;AACnDjF,kBAAQW,IAAR,GAAeiE,KAAf,CADmD,CAC9B;AACtB;;AAED,eAAOf,YAAY7D,OAAZ,CAAP;AACD,OANM,CAAP;AAOD;;AAED,WAAO6D,YAAY7D,OAAZ,CAAP;AACD,GApBD;AAqBD,CA1BD","file":"develop.js","sourcesContent":["/* @flow */\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst request = require(`request`)\nconst bootstrap = require(`../bootstrap`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`./webpack.config`)\nconst rl = require(`readline`)\nconst parsePath = require(`parse-filepath`)\nconst _ = require(`lodash`)\nconst { store } = require(`../redux`)\nconst copyStaticDirectory = require(`./copy-static-directory`)\nconst developHtml = require(`./develop-html`)\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfer with the regular\n// bootstrap.\nsetTimeout(() => {\n  copyStaticDirectory()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n\n  // Start bootstrap process.\n  await bootstrap(program)\n  await developHtml(program).catch(err => {\n    console.log(err)\n    process.exit(1)\n  })\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const devConfig = compilerConfig.resolve()\n  const compiler = webpack(devConfig)\n\n  const app = express()\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: () => {},\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n  app.use(\n    `/___graphql`,\n    graphqlHTTP({\n      schema: store.getState().schema,\n      graphiql: true,\n    })\n  )\n\n  app.use(express.static(__dirname + `/public`))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      noInfo: true,\n      quiet: true,\n      publicPath: devConfig.output.publicPath,\n    })\n  )\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      req.pipe(request(proxiedUrl)).pipe(res)\n    })\n  }\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    const parsedPath = parsePath(req.originalUrl)\n    if (parsedPath.extname === `` || parsedPath.extname === `.html`) {\n      res.sendFile(`${process.cwd()}/public/index.html`, err => {\n        if (err) {\n          res.status(500).end()\n        }\n      })\n    } else {\n      next()\n    }\n  })\n\n  // As last step, check if the file exists in the public folder.\n  app.get(`*`, (req, res) => {\n    // Load file but ignore errors.\n    res.sendFile(`${process.cwd()}/public/${req.url}`, err => {\n      if (err) {\n        res.status(404).end()\n      }\n    })\n  })\n\n  const listener = app.listen(program.port, program.host, e => {\n    if (e) {\n      if (e.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        console.log(\n          `Unable to start Gatsby on port ${program.port} as there's already a process listing on that port.`\n        )\n      } else {\n        console.log(e)\n      }\n\n      process.exit()\n    } else {\n      if (program.open) {\n        const host =\n          listener.address().address === `127.0.0.1`\n            ? `localhost`\n            : listener.address().address\n        const opn = require(`opn`)\n        opn(`http://${host}:${listener.address().port}`)\n      }\n    }\n  })\n}\n\nmodule.exports = (program: any) => {\n  const detect = require(`detect-port`)\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  detect(port, (err, _port) => {\n    if (err) {\n      console.error(err)\n      process.exit()\n    }\n\n    if (port !== _port) {\n      // eslint-disable-next-line max-len\n      const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n      return rlInterface.question(question, answer => {\n        if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n          program.port = _port // eslint-disable-line no-param-reassign\n        }\n\n        return startServer(program)\n      })\n    }\n\n    return startServer(program)\n  })\n}\n"]}