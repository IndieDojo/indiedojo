{"version":3,"sources":["../../src/bin/cli.js"],"names":["program","require","packageJson","path","_","Promise","global","onPossiblyUnhandledRejection","error","process","on","console","stack","defaultHost","directory","resolve","getSiteInfo","sitePackageJson","join","browserslist","version","usage","command","description","option","action","develop","p","env","NODE_ENV","build","then","log","uptime","exit","serve","rootPath","starter","newCommand","subCmd","argv","slice","cmds","map","commands","concat","includes","help","parse"],"mappings":"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","file":"cli.js","sourcesContent":["const program = require(`commander`)\nconst packageJson = require(`../../package.json`)\nconst path = require(`path`)\nconst _ = require(`lodash`)\nconst Promise = require(`bluebird`)\n\n// Improve Promise error handling. Maybe... what's the best\n// practice for this these days?\nglobal.Promise = require(`bluebird`)\nPromise.onPossiblyUnhandledRejection(error => {\n  throw error\n})\nprocess.on(`unhandledRejection`, error => {\n  console.error(`UNHANDLED REJECTION`, error.stack)\n})\n\nconst defaultHost = `localhost`\n\nconst directory = path.resolve(`.`)\nconst getSiteInfo = () => {\n  const sitePackageJson = require(path.join(directory, `package.json`))\n  const browserslist = sitePackageJson.browserslist || [\n    `> 1%`,\n    `last 2 versions`,\n    `IE >= 9`,\n  ]\n  return { sitePackageJson, browserslist }\n}\n\nprogram.version(packageJson.version).usage(`[command] [options]`)\n\n// console.time(`time to load develop`)\nprogram\n  .command(`develop`)\n  .description(\n    `Start development server. Watches files and rebuilds and hot reloads ` +\n      `if something changes`\n  ) // eslint-disable-line max-len\n  .option(\n    `-H, --host <url>`,\n    `Set host. Defaults to ${defaultHost}`,\n    defaultHost\n  )\n  .option(`-p, --port <port>`, `Set port. Defaults to 8000`, `8000`)\n  .option(`-o, --open`, `Open the site in your browser for you.`)\n  .action(command => {\n    const develop = require(`../utils/develop`)\n    // console.timeEnd(`time to load develop`)\n    const { sitePackageJson, browserslist } = getSiteInfo()\n    const p = {\n      ...command,\n      directory,\n      sitePackageJson,\n      browserslist,\n    }\n    develop(p)\n  })\n\nprogram\n  .command(`build`)\n  .description(`Build a Gatsby project.`)\n  .option(\n    `--prefix-paths`,\n    `Build site with link paths prefixed (set prefix in your config).`\n  )\n  .action(command => {\n    // Set NODE_ENV to 'production'\n    process.env.NODE_ENV = `production`\n\n    const build = require(`../utils/build`)\n    const { sitePackageJson, browserslist } = getSiteInfo()\n    const p = {\n      ...command,\n      directory,\n      sitePackageJson,\n      browserslist,\n    }\n    build(p).then(() => {\n      console.log(`Done building in`, process.uptime(), `seconds`)\n      process.exit()\n    })\n  })\n\nprogram\n  .command(`serve`)\n  .description(`Serve built site.`)\n  .option(\n    `-H, --host <url>`,\n    `Set host. Defaults to ${defaultHost}`,\n    defaultHost\n  )\n  .option(`-p, --port <port>`, `Set port. Defaults to 9000`, `9000`)\n  .option(`-o, --open`, `Open the site in your browser for you.`)\n  .action(command => {\n    const serve = require(`../utils/serve`)\n    const { sitePackageJson, browserslist } = getSiteInfo()\n    const p = {\n      ...command,\n      directory,\n      sitePackageJson,\n      browserslist,\n    }\n    serve(p)\n  })\n\nprogram\n  .command(`new [rootPath] [starter]`)\n  .description(`Create new Gatsby project.`)\n  .action((rootPath, starter) => {\n    const newCommand = require(`../utils/new`)\n    newCommand(rootPath, starter)\n  })\n\nprogram.on(`--help`, () => {\n  console.log(\n    `To show subcommand help:\n\n    gatsby [command] -h\n`\n  )\n})\n\n// If the user types an unknown sub-command, just display the help.\nconst subCmd = process.argv.slice(2, 3)[0]\nlet cmds = _.map(program.commands, `_name`)\ncmds = cmds.concat([`--version`, `-V`])\n\nif (!_.includes(cmds, subCmd)) {\n  program.help()\n} else {\n  program.parse(process.argv)\n}\n"]}