{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","GraphQLString","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","module","exports","nodes","typeName","intermediateType","name","type","allNodes","traceId","fieldsFromPlugins","mergedFieldsFromPlugins","merge","gqlType","description","interfaces","fields","createNodeFields","proccesedType","isTypeOf","value","internal","inferedInputFields","nodeObjectType","node","args","inferredFields","resolve","a","context","runSift","latestNodes","filter","n","isObject","path","processedTypes","camelCase","createType","defaultNodeFields","id","parent","children","map","childNodesByType","flatMap","groupBy","undefined","forEach","maxChildCount","maxBy","values","childNodeType","c","g","length","filteredNodes","nodeId","childNode","find","types","all"],"mappings":"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","file":"build-node-types.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n  GraphQLString,\n} = require(`graphql`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = { [typeName: string]: ProcessedNodeType }\n\nmodule.exports = async () => {\n  const types = _.groupBy(getNodes(), node => node.internal.type)\n  const processedTypes: TypeMap = {}\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({ path, nodeId: n.id })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({ path, nodeId: childNode.id })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      allNodes: getNodes(),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      allNodes: getNodes(),\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: inferedInputFields.inferredFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          const latestNodes = _.filter(\n            getNodes(),\n            n => n.internal.type === typeName\n          )\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: { filter: { ...args } },\n            nodes: latestNodes,\n            path: context.path,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  return processedTypes\n}\n"]}