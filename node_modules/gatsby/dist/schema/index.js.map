{"version":3,"sources":["../../src/schema/index.js"],"names":["_","require","GraphQLSchema","GraphQLObjectType","buildNodeTypes","buildNodeConnections","store","invariant","module","exports","console","time","typesGQL","connections","values","nodes","mapValues","isEmpty","schema","query","name","fields","dispatch","type","payload"],"mappings":";;;;;;;;;;;;;;;;AACA,IAAMA,IAAIC,iBAAV;;eAC6CA,kB;IAArCC,a,YAAAA,a;IAAeC,iB,YAAAA,iB;;AAEvB,IAAMC,iBAAiBH,6BAAvB;AACA,IAAMI,uBAAuBJ,mCAA7B;;gBACkBA,mB;IAAVK,K,aAAAA,K;;AACR,IAAMC,YAAYN,oBAAlB;;AAEAO,OAAOC,OAAP,8DAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,kBAAQC,IAAR;;AADe;AAAA,iBAGQP,gBAHR;;AAAA;AAGTQ,kBAHS;AAITC,qBAJS,GAIKR,qBAAqBL,EAAEc,MAAF,CAASF,QAAT;;AAEzC;AAFoB,WAJL;AAOTG,eAPS,GAODf,EAAEgB,SAAF,CAAYJ,QAAZ,SAPC;;;AASfL,oBAAU,CAACP,EAAEiB,OAAF,CAAUF,KAAV,CAAX;AACAR,oBAAU,CAACP,EAAEiB,OAAF,CAAUJ,WAAV,CAAX;;AAEMK,gBAZS,GAYA,IAAIhB,aAAJ,CAAkB;AAC/BiB,mBAAO,IAAIhB,iBAAJ,CAAsB;AAC3BiB,mCAD2B;AAE3BC,iDAAaR,WAAb,EAA6BE,KAA7B;AAF2B,aAAtB;AADwB,WAAlB,CAZA;;;AAmBfT,gBAAMgB,QAAN,CAAe;AACbC,8BADa;AAEbC,qBAASN;AAFI,WAAf;;AAnBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","file":"index.js","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { GraphQLSchema, GraphQLObjectType } = require(`graphql`)\n\nconst buildNodeTypes = require(`./build-node-types`)\nconst buildNodeConnections = require(`./build-node-connections`)\nconst { store } = require(`../redux`)\nconst invariant = require(`invariant`)\n\nmodule.exports = async () => {\n  console.time(`building schema`)\n\n  const typesGQL = await buildNodeTypes()\n  const connections = buildNodeConnections(_.values(typesGQL))\n\n  // Pull off just the graphql node from each type object.\n  const nodes = _.mapValues(typesGQL, `node`)\n\n  invariant(!_.isEmpty(nodes), `There are no available GQL nodes`)\n  invariant(!_.isEmpty(connections), `There are no available GQL connections`)\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: `RootQueryType`,\n      fields: { ...connections, ...nodes },\n    }),\n  })\n\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n}\n"]}