{"version":3,"sources":["../../src/schema/infer-graphql-input-fields.js"],"names":["inferInputObjectStructureFromNodes","require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLEnumType","GraphQLNonNull","oneLine","_","invariant","typeOf","createTypeName","createKey","extractFieldExamples","buildFieldEnumValues","isEmptyObjectOrArray","typeFields","type","eq","ne","regex","glob","inferGraphQLInputFields","value","nodes","prefix","headValue","headType","isInteger","inType","inferredField","name","fields","in","exampleValue","inferredFields","EXCLUDE_KEYS","parent","children","typeName","isRoot","each","key","includes","field","upperFirst","sort","enumValues","SortByType","values","camelCase","order","defaultValue","ASC","DESC"],"mappings":"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","file":"infer-graphql-input-fields.js","sourcesContent":["// @flow\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n} = require(`graphql`)\nconst { oneLine } = require(`common-tags`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst typeOf = require(`type-of`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  buildFieldEnumValues,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type {\n  GraphQLInputFieldConfig,\n  GraphQLInputFieldConfigMap,\n} from \"graphql/type/definition\"\n\nfunction typeFields(type): GraphQLInputFieldConfigMap {\n  switch (type) {\n    case `boolean`:\n      return {\n        eq: { type: GraphQLBoolean },\n        ne: { type: GraphQLBoolean },\n      }\n    case `string`:\n      return {\n        eq: { type: GraphQLString },\n        ne: { type: GraphQLString },\n        regex: { type: GraphQLString },\n        glob: { type: GraphQLString },\n      }\n    case `int`:\n      return {\n        eq: { type: GraphQLInt },\n        ne: { type: GraphQLInt },\n      }\n    case `float`:\n      return {\n        eq: { type: GraphQLFloat },\n        ne: { type: GraphQLFloat },\n      }\n  }\n  return {}\n}\n\nfunction inferGraphQLInputFields({\n  value,\n  nodes,\n  prefix,\n}): ?GraphQLInputFieldConfig {\n  if (value == null || isEmptyObjectOrArray(value)) return null\n\n  switch (typeOf(value)) {\n    case `array`: {\n      const headValue = value[0]\n      let headType = typeOf(headValue)\n\n      if (headType === `number`)\n        headType = _.isInteger(headValue) ? `int` : `float`\n\n      // Determine type for in operator.\n      let inType\n      switch (headType) {\n        case `int`:\n          inType = GraphQLInt\n          break\n        case `float`:\n          inType = GraphQLFloat\n          break\n        case `string`:\n          inType = GraphQLString\n          break\n        case `boolean`:\n          inType = GraphQLBoolean\n          break\n        case `array`:\n        case `object`: {\n          let inferredField = inferGraphQLInputFields({\n            value: headValue,\n            prefix,\n            nodes,\n          })\n          invariant(\n            inferredField,\n            `Could not infer graphQL type for value: ${headValue}`\n          )\n          inType = inferredField.type\n          break\n        }\n        default:\n          invariant(\n            false,\n            oneLine`\n              Could not infer an appropriate GraphQL input type\n              for value: ${headValue} of type ${headType} along path: ${prefix}\n            `\n          )\n      }\n\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryList`),\n          fields: {\n            ...typeFields(headType),\n            in: { type: new GraphQLList(inType) },\n          },\n        }),\n      }\n    }\n    case `boolean`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryBoolean`),\n          fields: typeFields(`boolean`),\n        }),\n      }\n    }\n    case `string`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryString`),\n          fields: typeFields(`string`),\n        }),\n      }\n    }\n    case `object`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}InputObject`),\n          fields: inferInputObjectStructureFromNodes({\n            nodes,\n            prefix,\n            exampleValue: value,\n          }).inferredFields,\n        }),\n      }\n    }\n    case `number`: {\n      if (value % 1 === 0) {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryInteger`),\n            fields: typeFields(`int`),\n          }),\n        }\n      } else {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryFloat`),\n            fields: typeFields(`float`),\n          }),\n        }\n      }\n    }\n    default:\n      return null\n  }\n}\n\nconst EXCLUDE_KEYS = {\n  parent: 1,\n  children: 1,\n}\n\ntype InferInputOptions = {\n  nodes: Object[],\n  typeName?: string,\n  prefix?: string,\n  exampleValue?: Object,\n}\n\nexport function inferInputObjectStructureFromNodes({\n  nodes,\n  typeName = ``,\n  prefix = ``,\n  exampleValue = extractFieldExamples(nodes),\n}: InferInputOptions): GraphQLInputFieldConfigMap {\n  const inferredFields = {}\n  const isRoot = !prefix\n\n  prefix = isRoot ? typeName : prefix\n\n  _.each(exampleValue, (value, key) => {\n    // Remove fields for traversing through nodes as we want to control\n    // setting traversing up not try to automatically infer them.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    // Input arguments on linked fields aren't currently supported\n    if (_.includes(key, `___NODE`)) return\n\n    let field = inferGraphQLInputFields({\n      nodes,\n      value,\n      prefix: `${prefix}${_.upperFirst(key)}`,\n    })\n\n    if (field == null) return\n    inferredFields[createKey(key)] = field\n  })\n\n  // Add sorting (but only to the top level).\n  let sort\n  if (typeName) {\n    const enumValues = buildFieldEnumValues(nodes)\n\n    const SortByType = new GraphQLEnumType({\n      name: `${typeName}SortByFieldsEnum`,\n      values: enumValues,\n    })\n\n    sort = {\n      type: new GraphQLInputObjectType({\n        name: _.camelCase(`${typeName} sort`),\n        fields: {\n          fields: {\n            name: _.camelCase(`${typeName} sortFields`),\n            type: new GraphQLNonNull(new GraphQLList(SortByType)),\n          },\n          order: {\n            name: _.camelCase(`${typeName} sortOrder`),\n            defaultValue: `asc`,\n            type: new GraphQLEnumType({\n              name: _.camelCase(`${typeName} sortOrderValues`),\n              values: {\n                ASC: { value: `asc` },\n                DESC: { value: `desc` },\n              },\n            }),\n          },\n        },\n      }),\n    }\n  }\n\n  return { inferredFields, sort }\n}\n"]}