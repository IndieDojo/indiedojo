{"version":3,"sources":["../../src/schema/build-node-connections.js"],"names":["_","require","connectionArgs","connectionDefinitions","GraphQLInputObjectType","inferInputObjectStructureFromNodes","buildConnectionFields","getNodes","module","exports","types","connections","each","type","nodes","nodeType","nodeObjectType","connectionFields","typeConnection","connectionType","typeName","name","sort","inferredFields","camelCase","description","args","filter","fields","resolve","object","resolveArgs","b","rootValue","path","runSift","latestNodes","n","internal","connection"],"mappings":";;;;;;;;AACA,IAAMA,IAAIC,iBAAV;;eACkDA,6B;IAA1CC,c,YAAAA,c;IAAgBC,qB,YAAAA,qB;;gBACWF,kB;IAA3BG,sB,aAAAA,sB;;gBAGJH,uC;IADFI,kC,aAAAA,kC;;AAEF,IAAMC,wBAAwBL,oCAA9B;;gBACqBA,mB;IAAbM,Q,aAAAA,Q;;AAERC,OAAOC,OAAP,GAAiB,UAACC,KAAD,EAAgB;AAC/B,MAAMC,cAAc,EAApB;;AAEAX,IAAEY,IAAF,CAAOF,KAAP,EAAc,UAACG,IAAD,CAAM,gBAAN,EAA2B;AACvC,QAAMC,QAAQD,KAAKC,KAAnB;;AADuC,gCAEIX,sBAAsB;AAC/DY,gBAAUF,KAAKG,cADgD;AAE/DC,wBAAkB;AAAA,eAAMX,sBAAsBO,IAAtB,CAAN;AAAA;AAF6C,KAAtB,CAFJ;AAAA,QAEfK,cAFe,yBAE/BC,cAF+B;;AAAA,gCAONd,mCAAmC;AAClES,kBADkE;AAElEM,gBAAaP,KAAKQ,IAAlB;AAFkE,KAAnC,CAPM;AAAA,QAO/BC,IAP+B,yBAO/BA,IAP+B;AAAA,QAOzBC,cAPyB,yBAOzBA,cAPyB;;AAYvCZ,gBAAYX,EAAEwB,SAAF,UAAmBX,KAAKQ,IAAxB,CAAZ,IAA+C;AAC7CR,YAAMK,cADuC;AAE7CO,0CAAkCZ,KAAKQ,IAAvC,WAF6C;AAG7CK,uCACKxB,cADL;AAEEoB,kBAFF;AAGEK,gBAAQ;AACNd,gBAAM,IAAIT,sBAAJ,CAA2B;AAC/BiB,kBAAMrB,EAAEwB,SAAF,aAAsBX,KAAKQ,IAA3B,CADyB;AAE/BI,0DAF+B;AAG/BG,oBAAQ;AAAA,qBAAML,cAAN;AAAA;AAHuB,WAA3B;AADA;AAHV,QAH6C;AAc7CM,aAd6C,mBAcrCC,MAdqC,EAc7BC,WAd6B,EAchBC,CAdgB,QAcE;AAAA,YAAbC,SAAa,QAAbA,SAAa;;AAC7C,YAAIC,aAAJ;AACA,YAAI,OAAOD,SAAP,gBAAJ,EAAsC;AACpCC,iBAAOD,UAAUC,IAAjB;AACD;AACD,YAAMC,UAAUlC,qBAAhB;AACA,YAAMmC,cAAcpC,EAAE2B,MAAF,CAClBpB,UADkB,EAElB;AAAA,iBAAK8B,EAAEC,QAAF,CAAWzB,IAAX,KAAoBA,KAAKQ,IAA9B;AAAA,SAFkB,CAApB;AAIA,eAAOc,QAAQ;AACbT,gBAAMK,WADO;AAEbjB,iBAAOsB,WAFM;AAGbG,sBAAY,IAHC;AAIbL;AAJa,SAAR,CAAP;AAMD;AA9B4C,KAA/C;AAgCD,GA5CD;;AA8CA,SAAOvB,WAAP;AACD,CAlDD","file":"build-node-connections.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst { connectionArgs, connectionDefinitions } = require(`graphql-skip-limit`)\nconst { GraphQLInputObjectType } = require(`graphql`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst buildConnectionFields = require(`./build-connection-fields`)\nconst { getNodes } = require(`../redux`)\n\nmodule.exports = (types: any) => {\n  const connections = {}\n\n  _.each(types, (type /* , fieldName*/) => {\n    const nodes = type.nodes\n    const { connectionType: typeConnection } = connectionDefinitions({\n      nodeType: type.nodeObjectType,\n      connectionFields: () => buildConnectionFields(type),\n    })\n\n    const { sort, inferredFields } = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName: `${type.name}Connection`,\n    })\n\n    connections[_.camelCase(`all ${type.name}`)] = {\n      type: typeConnection,\n      description: `Connection to all ${type.name} nodes`,\n      args: {\n        ...connectionArgs,\n        sort,\n        filter: {\n          type: new GraphQLInputObjectType({\n            name: _.camelCase(`filter ${type.name}`),\n            description: `Filter connection on its fields`,\n            fields: () => inferredFields,\n          }),\n        },\n      },\n      resolve(object, resolveArgs, b, { rootValue }) {\n        let path\n        if (typeof rootValue !== `undefined`) {\n          path = rootValue.path\n        }\n        const runSift = require(`./run-sift`)\n        const latestNodes = _.filter(\n          getNodes(),\n          n => n.internal.type === type.name\n        )\n        return runSift({\n          args: resolveArgs,\n          nodes: latestNodes,\n          connection: true,\n          path,\n        })\n      },\n    }\n  })\n\n  return connections\n}\n"]}