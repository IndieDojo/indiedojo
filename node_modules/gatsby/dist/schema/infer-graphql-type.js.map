{"version":3,"sources":["../../src/schema/infer-graphql-type.js"],"names":["inferObjectStructureFromNodes","require","GraphQLObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLUnionType","_","invariant","moment","mime","isRelative","isRelativeUrl","normalize","systemPath","oneLine","store","getNode","getNodes","joinPath","createPageDependency","createTypeName","createKey","extractFieldExamples","isEmptyObjectOrArray","ISO_8601_FORMAT","inferGraphQLType","exampleValue","selector","otherArgs","fieldName","split","pop","Array","isArray","headType","isObject","name","fields","inferredType","type","momentDate","utc","isValid","args","formatString","fromNow","description","difference","resolve","object","date","format","diff","isInteger","inferFromMapping","value","mapping","fieldSelector","types","matchedTypes","filter","isEmpty","console","log","findNode","fieldValue","path","linkedType","linkedNode","find","n","internal","id","nodeId","nodeObjectType","node","a","b","map","findLinkedNode","linkedField","inferFromFieldName","uniqBy","v","key","validateLinkedNode","validateField","field","findNodeType","linkedNodes","forEach","i","length","f","join","resolveType","data","result","findRootNode","rootNode","whileCount","parent","undefined","shouldInferFile","nodes","get","looksLikeFile","isString","lookup","pathToOtherNode","dir","otherFileExists","some","absolutePath","inferFromUri","fileField","parentFileNode","fileLinkPath","linkedFileNode","EXCLUDE_KEYS","children","config","getState","isRoot","inferredFields","each","nextSelector","inferredField","includes"],"mappings":"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","file":"infer-graphql-type.js","sourcesContent":["// @flow\nconst {\n  GraphQLObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLUnionType,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst moment = require(`moment`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\nconst normalize = require(`normalize-path`)\nconst systemPath = require(`path`)\nconst { oneLine } = require(`common-tags`)\n\nconst { store, getNode, getNodes } = require(`../redux`)\nconst { joinPath } = require(`../utils/path`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type { GraphQLOutputType } from \"graphql\"\nimport type {\n  GraphQLFieldConfig,\n  GraphQLFieldConfigMap,\n} from \"graphql/type/definition\"\n\nexport type ProcessedNodeType = {\n  name: string,\n  nodes: any[],\n  node: GraphQLFieldConfig<*, *>,\n  fieldsFromPlugins: any,\n  nodeObjectType: GraphQLOutputType,\n}\n\nconst ISO_8601_FORMAT = [\n  `YYYY`,\n  `YYYY-MM`,\n  `YYYY-MM-DD`,\n  `YYYYMMDD`,\n  `YYYY-MM-DDTHHZ`,\n  `YYYY-MM-DDTHH:mmZ`,\n  `YYYY-MM-DDTHHmmZ`,\n  `YYYY-MM-DDTHH:mm:ssZ`,\n  `YYYY-MM-DDTHHmmssZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSZ`,\n  `YYYY-[W]WW`,\n  `YYYY[W]WW`,\n  `YYYY-[W]WW-E`,\n  `YYYY[W]WWE`,\n  `YYYY-DDDD`,\n  `YYYYDDDD`,\n]\n\nfunction inferGraphQLType({\n  exampleValue,\n  selector,\n  ...otherArgs\n}): ?GraphQLFieldConfig<*, *> {\n  if (exampleValue == null || isEmptyObjectOrArray(exampleValue)) return\n  let fieldName = selector.split(`.`).pop()\n\n  if (Array.isArray(exampleValue)) {\n    exampleValue = exampleValue[0]\n\n    if (exampleValue == null) return\n\n    let headType\n    // If the array contains objects, than treat them as \"nodes\"\n    // and create an object type.\n    if (_.isObject(exampleValue)) {\n      headType = new GraphQLObjectType({\n        name: createTypeName(fieldName),\n        fields: inferObjectStructureFromNodes({\n          ...otherArgs,\n          exampleValue,\n          selector,\n        }),\n      })\n      // Else if the values are simple values, just infer their type.\n    } else {\n      let inferredType = inferGraphQLType({\n        ...otherArgs,\n        exampleValue,\n        selector,\n      })\n      invariant(\n        inferredType,\n        `Could not infer graphQL type for value: ${exampleValue}`\n      )\n\n      headType = inferredType.type\n    }\n    return { type: new GraphQLList(headType) }\n  }\n\n  // Check if this is a date.\n  // All the allowed ISO 8601 date-time formats used.\n  const momentDate = moment.utc(exampleValue, ISO_8601_FORMAT, true)\n  if (momentDate.isValid()) {\n    return {\n      type: GraphQLString,\n      args: {\n        formatString: {\n          type: GraphQLString,\n        },\n        fromNow: {\n          type: GraphQLBoolean,\n          description: oneLine`\n            Returns a string generated with Moment.js' fromNow function`,\n        },\n        difference: {\n          type: GraphQLString,\n          description: oneLine`\n            Returns the difference between this date and the current time.\n            Defaults to miliseconds but you can also pass in as the\n            measurement years, months, weeks, days, hours, minutes,\n            and seconds.`,\n        },\n      },\n      resolve(object, { fromNow, difference, formatString }) {\n        const date = object[fieldName]\n        if (formatString) {\n          return moment.utc(date, ISO_8601_FORMAT, true).format(formatString)\n        } else if (fromNow) {\n          return moment.utc(date, ISO_8601_FORMAT, true).fromNow()\n        } else if (difference) {\n          return moment().diff(\n            moment.utc(date, ISO_8601_FORMAT, true),\n            difference\n          )\n        } else {\n          return date\n        }\n      },\n    }\n  }\n\n  switch (typeof exampleValue) {\n    case `boolean`:\n      return { type: GraphQLBoolean }\n    case `string`:\n      return { type: GraphQLString }\n    case `object`:\n      return {\n        type: new GraphQLObjectType({\n          name: createTypeName(fieldName),\n          fields: inferObjectStructureFromNodes({\n            ...otherArgs,\n            exampleValue,\n            selector,\n          }),\n        }),\n      }\n    case `number`:\n      return _.isInteger(exampleValue)\n        ? { type: GraphQLInt }\n        : { type: GraphQLFloat }\n    default:\n      return null\n  }\n}\n\nfunction inferFromMapping(\n  value,\n  mapping,\n  fieldSelector,\n  types\n): ?GraphQLFieldConfig<*, *> {\n  const matchedTypes = types.filter(\n    type => type.name === mapping[fieldSelector]\n  )\n  if (_.isEmpty(matchedTypes)) {\n    console.log(`Couldn't find a matching node type for \"${fieldSelector}\"`)\n    return\n  }\n\n  const findNode = (fieldValue, path) => {\n    const linkedType = mapping[fieldSelector]\n    const linkedNode = _.find(\n      getNodes(),\n      n => n.internal.type === linkedType && n.id === fieldValue\n    )\n    if (linkedNode) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n      return linkedNode\n    }\n  }\n\n  if (_.isArray(value)) {\n    return {\n      type: new GraphQLList(matchedTypes[0].nodeObjectType),\n      resolve: (node, a, b, { fieldName }) => {\n        const fieldValue = node[fieldName]\n\n        if (fieldValue) {\n          return fieldValue.map(value => findNode(value, b.path))\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  return {\n    type: matchedTypes[0].nodeObjectType,\n    resolve: (node, a, b, { fieldName }) => {\n      const fieldValue = node[fieldName]\n\n      if (fieldValue) {\n        return findNode(fieldValue, b.path)\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findLinkedNode(value, linkedField, path) {\n  let linkedNode\n  // If the field doesn't link to the id, use that for searching.\n  if (linkedField) {\n    linkedNode = getNodes().find(n => n[linkedField] === value)\n    // Else the field is linking to the node's id, the default.\n  } else {\n    linkedNode = getNode(value)\n  }\n\n  if (linkedNode) {\n    if (path) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n    }\n    return linkedNode\n  }\n}\n\nfunction inferFromFieldName(value, selector, types): GraphQLFieldConfig<*, *> {\n  let isArray = false\n  if (_.isArray(value)) {\n    isArray = true\n    // Reduce values to nodes with unique types.\n    value = _.uniqBy(value, v => getNode(v).internal.type)\n  }\n\n  const key = selector.split(`.`).pop()\n  const [, , linkedField] = key.split(`___`)\n\n  const validateLinkedNode = linkedNode => {\n    invariant(\n      linkedNode,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding node with the ${linkedField || `id`}\n        field matching: \"${value}\"\n      `\n    )\n  }\n  const validateField = (linkedNode, field) => {\n    invariant(\n      field,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding GraphQL type \"${linkedNode.internal\n          .type}\" available\n        to link to this node.\n      `\n    )\n  }\n\n  const findNodeType = node =>\n    types.find(type => type.name === node.internal.type)\n\n  if (isArray) {\n    const linkedNodes = value.map(v => findLinkedNode(v))\n    linkedNodes.forEach(node => validateLinkedNode(node))\n    const fields = linkedNodes.map(node => findNodeType(node))\n    fields.forEach((field, i) => validateField(linkedNodes[i], field))\n\n    let type\n    // If there's more than one type, we'll create a union type.\n    if (fields.length > 1) {\n      type = new GraphQLUnionType({\n        name: `Union_${key}_${fields.map(f => f.name).join(`__`)}`,\n        description: `Union interface for the field \"${key}\" for types [${fields\n          .map(f => f.name)\n          .join(`, `)}]`,\n        types: fields.map(f => f.nodeObjectType),\n        resolveType: data =>\n          fields.find(f => f.name == data.internal.type).nodeObjectType,\n      })\n    } else {\n      type = fields[0].nodeObjectType\n    }\n\n    return {\n      type: new GraphQLList(type),\n      resolve: (node, a, b = {}) => {\n        let fieldValue = node[key]\n        if (fieldValue) {\n          return fieldValue.map(value =>\n            findLinkedNode(value, linkedField, b.path)\n          )\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  const linkedNode = findLinkedNode(value, linkedField)\n  validateLinkedNode(linkedNode)\n  const field = findNodeType(linkedNode)\n  validateField(linkedNode, field)\n  return {\n    type: field.nodeObjectType,\n    resolve: (node, a, b = {}) => {\n      let fieldValue = node[key]\n      if (fieldValue) {\n        const result = findLinkedNode(fieldValue, linkedField, b.path)\n        return result\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findRootNode(node) {\n  // Find the root node.\n  let rootNode = node\n  let whileCount = 0\n  while (\n    rootNode.parent &&\n    getNode(rootNode.parent) !== undefined &&\n    whileCount < 101\n  ) {\n    rootNode = getNode(rootNode.parent)\n    whileCount += 1\n    if (whileCount > 100) {\n      console.log(\n        `It looks like you have a node that's set its parent as itself`,\n        rootNode\n      )\n    }\n  }\n\n  return rootNode\n}\n\nfunction shouldInferFile(nodes, key, value) {\n  // Find the node used for this example.\n  const node = nodes.find(n => _.get(n, key) === value)\n\n  if (!node) {\n    return false\n  }\n\n  const looksLikeFile =\n    _.isString(value) &&\n    mime.lookup(value) !== `application/octet-stream` &&\n    // domains ending with .com\n    mime.lookup(value) !== `application/x-msdownload` &&\n    isRelative(value) &&\n    isRelativeUrl(value)\n\n  if (!looksLikeFile) {\n    return false\n  }\n\n  const rootNode = findRootNode(node)\n\n  // Only nodes transformed (ultimately) from a File\n  // can link to another File.\n  if (rootNode.internal.type !== `File`) {\n    return false\n  }\n\n  const pathToOtherNode = normalize(joinPath(rootNode.dir, value))\n  const otherFileExists = getNodes().some(\n    n => n.absolutePath === pathToOtherNode\n  )\n  return otherFileExists\n}\n\n// Look for fields that are pointing at a file — if the field has a known\n// extension then assume it should be a file field.\nfunction inferFromUri(key, types) {\n  const fileField = types.find(type => type.name === `File`)\n\n  if (!fileField) return\n\n  return {\n    type: fileField.nodeObjectType,\n    resolve: (node, a, { path }) => {\n      const fieldValue = node[key]\n\n      if (!fieldValue) {\n        return null\n      }\n\n      // Find File node for this node (we assume the node is something\n      // like markdown which would be a child node of a File node).\n      const parentFileNode = findRootNode(node)\n\n      // Use the parent File node to create the absolute path to\n      // the linked file.\n      const fileLinkPath = normalize(\n        systemPath.resolve(parentFileNode.dir, fieldValue)\n      )\n\n      // Use that path to find the linked File node.\n      const linkedFileNode = _.find(\n        getNodes(),\n        n => n.internal.type === `File` && n.absolutePath === fileLinkPath\n      )\n\n      if (linkedFileNode) {\n        createPageDependency({\n          path,\n          nodeId: linkedFileNode.id,\n        })\n        return linkedFileNode\n      } else {\n        return null\n      }\n    },\n  }\n}\n\ntype inferTypeOptions = {\n  nodes: Object[],\n  types: ProcessedNodeType[],\n  selector?: string,\n  exampleValue?: Object,\n}\n\nconst EXCLUDE_KEYS = {\n  id: 1,\n  parent: 1,\n  children: 1,\n}\n\n// Call this for the top level node + recursively for each sub-object.\n// E.g. This gets called for Markdown and then for its frontmatter subobject.\nexport function inferObjectStructureFromNodes({\n  nodes,\n  types,\n  selector,\n  exampleValue = extractFieldExamples(nodes),\n}: inferTypeOptions): GraphQLFieldConfigMap<*, *> {\n  const config = store.getState().config\n  const isRoot = !selector\n  const mapping = config && config.mapping\n\n  // Ensure nodes have internal key with object.\n  nodes = nodes.map(n => (n.internal ? n : { ...n, internal: {} }))\n\n  const inferredFields = {}\n  _.each(exampleValue, (value, key) => {\n    // Remove fields common to the top-level of all nodes.  We add these\n    // elsewhere so don't need to infer their type.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    // Several checks to see if a field is pointing to custom type\n    // before we try automatic inference.\n    const nextSelector = selector ? `${selector}.${key}` : key\n    const fieldSelector = `${nodes[0].internal.type}.${nextSelector}`\n\n    let fieldName = key\n    let inferredField\n\n    // First check for manual field => type mappings in the site's\n    // gatsby-config.js\n    if (mapping && _.includes(Object.keys(mapping), fieldSelector)) {\n      inferredField = inferFromMapping(value, mapping, fieldSelector, types)\n\n      // Second if the field has a suffix of ___node. We use then the value\n      // (a node id) to find the node and use that node's type as the field\n    } else if (_.includes(key, `___NODE`)) {\n      ;[fieldName] = key.split(`___`)\n      inferredField = inferFromFieldName(value, nextSelector, types)\n\n      // Third if the field is pointing to a file (from another file).\n    } else if (\n      nodes[0].internal.type !== `File` &&\n      shouldInferFile(nodes, nextSelector, value)\n    ) {\n      inferredField = inferFromUri(key, types)\n    }\n\n    // Finally our automatic inference of field value type.\n    if (!inferredField) {\n      inferredField = inferGraphQLType({\n        nodes,\n        types,\n        exampleValue: value,\n        selector: selector ? `${selector}.${key}` : key,\n      })\n    }\n\n    if (!inferredField) return\n\n    // Replace unsupported values\n    inferredFields[createKey(fieldName)] = inferredField\n  })\n\n  return inferredFields\n}\n"]}