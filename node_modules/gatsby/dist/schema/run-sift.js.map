{"version":3,"sources":["../../src/schema/run-sift.js"],"names":["sift","require","_","connectionFromArray","store","createPageDependency","prepareRegex","module","exports","args","nodes","connection","path","clonedArgs","JSON","parse","siftifyArgs","newObject","each","object","v","k","isObject","isArray","Minimatch","mm","makeRe","siftArgs","filter","includes","push","result","isEmpty","$and","length","sort","convertedFields","fields","map","field","replace","orderBy","order","connectionArray","totalCount","internal","type","nodeId","id"],"mappings":"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","file":"run-sift.js","sourcesContent":["// @flow\nconst sift = require(`sift`)\nconst _ = require(`lodash`)\nconst { connectionFromArray } = require(`graphql-skip-limit`)\nconst { store } = require(`../redux/`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst prepareRegex = require(`./prepare-regex`)\n\ntype Node = {\n  id: String,\n  type: String,\n}\n\nmodule.exports = ({ args, nodes, connection = false, path = `` }) => {\n  // Clone args as for some reason graphql-js removes the constructor\n  // from nested objects which breaks a check in sift.js.\n  const clonedArgs = JSON.parse(JSON.stringify(args))\n\n  const siftifyArgs = object => {\n    const newObject = {}\n    _.each(object, (v, k) => {\n      if (_.isObject(v) && !_.isArray(v)) {\n        newObject[k] = siftifyArgs(v)\n      } else {\n        // Compile regex first.\n        if (k === `regex`) {\n          newObject[`$regex`] = prepareRegex(v)\n        } else if (k === `glob`) {\n          const Minimatch = require(`minimatch`).Minimatch\n          const mm = new Minimatch(v)\n          newObject[`$regex`] = mm.makeRe()\n        } else {\n          newObject[`$${k}`] = v\n        }\n      }\n    })\n    return newObject\n  }\n\n  const siftArgs = []\n  if (clonedArgs.filter) {\n    _.each(clonedArgs.filter, (v, k) => {\n      // Ignore connection and sorting args\n      if (_.includes([`skip`, `limit`, `sort`], k)) return\n\n      siftArgs.push(siftifyArgs({ [k]: v }))\n    })\n  }\n\n  let result = _.isEmpty(siftArgs) ? nodes : sift({ $and: siftArgs }, nodes)\n\n  if (!result || !result.length) return\n\n  // Sort results.\n  if (clonedArgs.sort) {\n    const convertedFields = clonedArgs.sort.fields.map(field =>\n      field.replace(/___/g, `.`)\n    )\n\n    result = _.orderBy(result, convertedFields, clonedArgs.sort.order)\n  }\n\n  if (connection) {\n    const connectionArray = connectionFromArray(result, args)\n    connectionArray.totalCount = result.length\n    if (result.length > 0 && result[0].internal) {\n      createPageDependency({\n        path,\n        connection: result[0].internal.type,\n      })\n    }\n    return connectionArray\n  }\n\n  createPageDependency({\n    path,\n    nodeId: result[0].id,\n  })\n\n  return result[0]\n}\n"]}