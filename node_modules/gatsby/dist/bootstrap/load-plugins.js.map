{"version":3,"sources":["../../src/bootstrap/load-plugins.js"],"names":["_","require","slash","fs","path","crypto","store","nodeAPIs","glob","createFileContentHash","root","globPattern","hash","createHash","files","sync","nodir","forEach","update","readFileSync","filepath","digest","resolvePlugin","pluginName","existsSync","resolvedPath","resolve","packageJSON","JSON","parse","name","version","Error","dirname","err","module","exports","config","plugins","processPlugin","isString","plugin","info","pluginOptions","subplugins","options","push","p","merge","join","__dirname","process","cwd","flattenedPlugins","extractPlugins","subPlugin","apis","keys","badExports","gatsbyNode","e","concat","without","map","exportName","pluginVersion","length","stringSimiliarity","stripIndent","console","log","similarities","findBestMatch","bady","message","bestMatch","rating","target","exit","dispatch","type","payload"],"mappings":"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","file":"load-plugins.js","sourcesContent":["const _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst crypto = require(`crypto`)\nconst { store } = require(`../redux`)\nconst nodeAPIs = require(`../utils/api-node-docs`)\nconst glob = require(`glob`)\n\nfunction createFileContentHash(root, globPattern) {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * @typedef {Object} PluginInfo\n * @property {string} resolve The absolute path to the plugin\n * @property {string} name The plugin name\n * @property {string} version The plugin version (can be content hash)\n */\n\n/**\n * resolvePlugin\n * @param {string} pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @return {PluginInfo}\n */\nfunction resolvePlugin(pluginName) {\n  // Only find plugins when we're not given an absolute path\n  if (!fs.existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (fs.existsSync(resolvedPath)) {\n      if (fs.existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        )\n\n        return {\n          resolve: resolvedPath,\n          name: packageJSON.name || pluginName,\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const resolvedPath = slash(path.dirname(require.resolve(pluginName)))\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n\n    return {\n      resolve: resolvedPath,\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(`Unable to find plugin \"${pluginName}\"`)\n  }\n}\n\nmodule.exports = async (config = {}) => {\n  // Instantiate plugins.\n  const plugins = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  const processPlugin = plugin => {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      // Plugins can have plugins.\n      const subplugins = []\n      if (plugin.options && plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        return {\n          name: `TEST`,\n          pluginOptions: {\n            plugins: [],\n          },\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve)\n\n      return {\n        ...info,\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/component-page-creator`)\n    )\n  )\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/internal-data-bridge`)\n    )\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/dev-404-page`))\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/prod-404`))\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/query-runner`))\n  )\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  // Create a \"flattened\" array of plugins with all subplugins\n  // brought to the top-level. This simplifies running gatsby-* files\n  // for subplugins.\n  const flattenedPlugins = []\n  const extractPlugins = plugin => {\n    plugin.pluginOptions.plugins.forEach(subPlugin => {\n      flattenedPlugins.push(subPlugin)\n      extractPlugins(subPlugin)\n    })\n  }\n\n  plugins.forEach(plugin => {\n    flattenedPlugins.push(plugin)\n    extractPlugins(plugin)\n  })\n\n  // Validate plugins before saving. Plugins can only export known APIs. Collect\n  // any bad exports (either typos or outdated) and output an error and quit.\n  const apis = _.keys(nodeAPIs)\n  let badExports = []\n  flattenedPlugins.forEach(plugin => {\n    let gatsbyNode\n    try {\n      gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n    } catch (e) {\n      // ignore\n    }\n\n    if (gatsbyNode) {\n      badExports = badExports.concat(\n        _.without(_.keys(gatsbyNode), ...apis).map(e => {\n          return {\n            exportName: e,\n            pluginName: plugin.name,\n            pluginVersion: plugin.version,\n          }\n        })\n      )\n    }\n  })\n\n  if (badExports.length > 0) {\n    const stringSimiliarity = require(`string-similarity`)\n    const { stripIndent } = require(`common-tags`)\n    console.log(`\\n`)\n    console.log(\n      stripIndent`\n      Your plugins must export known APIs from their gatsby-node.js.\n      The following exports aren't APIs. Perhaps you made a typo or\n      your plugin is outdated?\n\n      See https://www.gatsbyjs.org/docs/node-apis/ for the list of Gatsby Node APIs`\n    )\n    badExports.forEach(bady => {\n      const similarities = stringSimiliarity.findBestMatch(\n        bady.exportName,\n        apis\n      )\n      let message = `\\n — `\n      if (bady.pluginName == `default-site-plugin`) {\n        message += `Your site's gatsby-node.js is exporting a variable named \"${bady.exportName}\" which isn't an API.`\n      } else {\n        message += `The plugin \"${bady.pluginName}@${bady.pluginVersion}\" is exporting a variable named \"${bady.exportName}\" which isn't an API.`\n      }\n      if (similarities.bestMatch.rating > 0.5) {\n        message += ` Perhaps you meant to export \"${similarities.bestMatch\n          .target}\"?`\n      }\n\n      console.log(message)\n    })\n    process.exit()\n  }\n\n  store.dispatch({\n    type: `SET_SITE_PLUGINS`,\n    payload: plugins,\n  })\n\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins,\n  })\n\n  return flattenedPlugins\n}\n"]}