{"version":3,"sources":["../../src/bootstrap/index.js"],"names":["Promise","require","glob","_","slash","fs","md5File","crypto","report","convertHrtime","apiRunnerNode","graphql","store","emitter","loadPlugins","initCache","extractQueries","runQueries","writePages","activityTimer","spinner","activity","start","process","hrtime","elapsedTime","precision","elapsed","toFixed","tick","name","end","success","preferDefault","m","default","module","exports","program","directory","dispatch","type","payload","config","e","firstLine","toString","split","test","console","log","exit","flattenedPlugins","pluginVersions","map","p","version","all","resolve","catch","hashes","pluginsHash","createHash","update","concat","digest","state","getState","oldPluginsHash","status","PLUGINS_HASH","remove","error","message","mkdirp","srcDir","__dirname","siteDir","copy","clobber","mkdirs","hasAPIFile","env","plugin","sync","ssrPlugins","filter","options","pluginOptions","browserPlugins","browserAPIRunner","readFileSync","err","browserPluginsRequires","join","sSRAPIRunner","ssrPluginsRequires","writeFileSync","extensions","traceId","apiResults","flattenDeep","graphqlRunner","query","context","schema","waitForCascadingActions","checkJobsDone","debounce","jobs","active","length","uptime","on"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\nconst Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs-extra`)\nconst md5File = require(`md5-file/promise`)\nconst crypto = require(`crypto`)\nconst report = require(`yurnalist`)\nconst convertHrtime = require(`convert-hrtime`)\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { graphql } = require(`graphql`)\nconst { store, emitter } = require(`../redux`)\nconst loadPlugins = require(`./load-plugins`)\nconst { initCache } = require(`../utils/cache`)\n\nconst {\n  extractQueries,\n} = require(`../internal-plugins/query-runner/query-watcher`)\nconst {\n  runQueries,\n} = require(`../internal-plugins/query-runner/page-query-runner`)\nconst { writePages } = require(`../internal-plugins/query-runner/pages-writer`)\n\nconst activityTimer = name => {\n  const spinner = report.activity()\n  const start = process.hrtime()\n\n  const elapsedTime = function() {\n    var precision = 3 // 3 decimal places\n    var elapsed = process.hrtime(start)\n    return `${convertHrtime(elapsed)[`seconds`].toFixed(precision)} s`\n  }\n  return {\n    start: () => {\n      spinner.tick(name)\n    },\n    end: () => {\n      report.success(`${name} â€” ${elapsedTime()}`)\n      spinner.end()\n    },\n  }\n}\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`./log-line-function`)\n\nconst preferDefault = m => (m && m.default) || m\n\nmodule.exports = async (program: any) => {\n  // Fix program directory path for windows env\n  program.directory = slash(program.directory)\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  // Try opening the site's gatsby-config.js file.\n  let activity = activityTimer(`open and validate gatsby-config.js`)\n  activity.start()\n  let config\n  try {\n    // $FlowFixMe\n    config = preferDefault(require(`${program.directory}/gatsby-config`))\n  } catch (e) {\n    const firstLine = e.toString().split(`\\n`)[0]\n    if (!/Error: Cannot find module.*gatsby-config/.test(firstLine)) {\n      console.log(``)\n      console.log(``)\n      console.log(e)\n      process.exit(1)\n    }\n  }\n\n  store.dispatch({\n    type: `SET_SITE_CONFIG`,\n    payload: config,\n  })\n\n  activity.end()\n\n  const flattenedPlugins = await loadPlugins(config)\n\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes = await Promise.all([\n    md5File(`package.json`),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-config.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-node.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  let state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    console.log(\n      `\nOne or more of your plugins have changed since the last time you ran Gatsby. As\na precaution, we're deleting your site's cache to ensure there's not any stale\ndata\n`\n    )\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {\n    try {\n      await fs.remove(`${program.directory}/.cache`)\n    } catch (e) {\n      console.error(`Failed to remove .cache files. ${e.message}`)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  initCache()\n\n  // Ensure the public/static directory is created.\n  await fs.mkdirp(`${program.directory}/public/static`)\n\n  // Copy our site files to the root of the site.\n  activity = activityTimer(`copy gatsby files`)\n  activity.start()\n  const srcDir = `${__dirname}/../cache-dir`\n  const siteDir = `${program.directory}/.cache`\n  try {\n    await fs.copy(srcDir, siteDir, { clobber: true })\n    await fs.mkdirs(`${program.directory}/.cache/json`)\n  } catch (e) {\n    console.log(`Unable to copy site files to .cache`)\n    console.log(e)\n    process.exit(1)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin) =>\n    // TODO make this async...\n    glob.sync(`${plugin.resolve}/gatsby-${env}*`)[0]\n\n  const ssrPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n  const browserPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  let browserAPIRunner = ``\n\n  try {\n    browserAPIRunner = fs.readFileSync(\n      `${siteDir}/api-runner-browser.js`,\n      `utf-8`\n    )\n  } catch (err) {\n    console.error(`Failed to read ${siteDir}/api-runner-browser.js`)\n  }\n\n  const browserPluginsRequires = browserPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n\n  browserAPIRunner = `var plugins = [${browserPluginsRequires}]\\n${browserAPIRunner}`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    console.error(`Failed to read ${siteDir}/api-runner-ssr.js`)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n\n  // Source nodes\n  activity = activityTimer(`source and transform nodes`)\n  activity.start()\n  await require(`../utils/source-nodes`)()\n  activity.end()\n\n  // Create Schema.\n  activity = activityTimer(`building schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.js`, `.jsx`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const graphqlRunner = (query, context = {}) => {\n    const schema = store.getState().schema\n    return graphql(schema, query, context, context, context)\n  }\n\n  // Collect pages.\n  activity = activityTimer(`createPages`)\n  activity.start()\n  await apiRunnerNode(`createPages`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPages`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // A variant on createPages for plugins that want to\n  // have full control over adding/removing pages. The normal\n  // \"createPages\" API is called every time (during development)\n  // that data changes.\n  activity = activityTimer(`createPagesStatefully`)\n  activity.start()\n  await apiRunnerNode(`createPagesStatefully`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPagesStatefully`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // Extract queries\n  activity = activityTimer(`extract queries from components`)\n  activity.start()\n  await extractQueries()\n  activity.end()\n\n  // Run queries\n  activity = activityTimer(`run graphql queries`)\n  activity.start()\n  await runQueries()\n  activity.end()\n\n  // Write out files.\n  activity = activityTimer(`write out page data`)\n  activity.start()\n  await writePages()\n  activity.end()\n\n  // Update Schema for SitePage.\n  activity = activityTimer(`update schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  const checkJobsDone = _.debounce(resolve => {\n    const state = store.getState()\n    if (state.jobs.active.length === 0) {\n      console.log(``)\n      console.log(\n        `bootstrap finished, time since started: ${process.uptime()}sec`\n      )\n      console.log(``)\n      resolve({ graphqlRunner })\n    }\n  }, 100)\n\n  if (store.getState().jobs.active.length === 0) {\n    console.log(``)\n    console.log(`bootstrap finished, time since started: ${process.uptime()} s`)\n    console.log(``)\n    return { graphqlRunner }\n  } else {\n    return new Promise(resolve => {\n      // Wait until all side effect jobs are finished.\n      emitter.on(`END_JOB`, () => checkJobsDone(resolve))\n    })\n  }\n}\n"]}