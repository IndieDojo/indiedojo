"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _graphql = require("graphql");

var _arrayconnection = require("../arrayconnection.js");

var _connection = require("../connection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var allUsers = [{ name: "Dan", friends: [1, 2, 3, 4] }, { name: "Nick", friends: [0, 2, 3, 4] }, { name: "Lee", friends: [0, 1, 3, 4] }, { name: "Joe", friends: [0, 1, 2, 4] }, { name: "Tim", friends: [0, 1, 2, 3] }];

var userType = new _graphql.GraphQLObjectType({
  name: "User",
  fields: function fields() {
    return {
      name: {
        type: _graphql.GraphQLString
      },
      friends: {
        type: friendConnection,
        args: _connection.connectionArgs,
        resolve: function resolve(user, args) {
          return (0, _arrayconnection.connectionFromArray)(user.friends, args);
        }
      }
    };
  }
});

var _connectionDefinition = (0, _connection.connectionDefinitions)({
  name: "Friend",
  nodeType: userType,
  resolveNode: function resolveNode(edge) {
    return allUsers[edge.node];
  },
  edgeFields: function edgeFields() {
    return {
      friendshipTime: {
        type: _graphql.GraphQLString,
        resolve: function resolve() {
          return "Yesterday";
        }
      }
    };
  },
  connectionFields: function connectionFields() {
    return {
      totalCount: {
        type: _graphql.GraphQLInt,
        resolve: function resolve() {
          return allUsers.length - 1;
        }
      }
    };
  }
}),
    friendConnection = _connectionDefinition.connectionType;

var _connectionDefinition2 = (0, _connection.connectionDefinitions)({
  nodeType: userType,
  resolveNode: function resolveNode(edge) {
    return allUsers[edge.node];
  }
}),
    userConnection = _connectionDefinition2.connectionType;

var queryType = new _graphql.GraphQLObjectType({
  name: "Query",
  fields: function fields() {
    return {
      user: {
        type: userType,
        resolve: function resolve() {
          return allUsers[0];
        }
      }
    };
  }
});

var schema = new _graphql.GraphQLSchema({
  query: queryType
});

describe("connectionDefinition()", function () {
  it("includes connection and edge fields", (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var query, expected, result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            query = "\n      query FriendsQuery {\n        user {\n          friends(limit: 2) {\n            totalCount\n            edges {\n              friendshipTime\n              node {\n                name\n              }\n            }\n          }\n        }\n      }\n    ";
            expected = {
              user: {
                friends: {
                  totalCount: 4,
                  edges: [{
                    friendshipTime: "Yesterday",
                    node: {
                      name: "Nick"
                    }
                  }, {
                    friendshipTime: "Yesterday",
                    node: {
                      name: "Lee"
                    }
                  }]
                }
              }
            };
            _context.next = 4;
            return (0, _graphql.graphql)(schema, query);

          case 4:
            result = _context.sent;

            expect(result).toEqual({ data: expected });

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});