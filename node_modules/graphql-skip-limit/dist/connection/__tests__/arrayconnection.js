"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _arrayconnection = require("../arrayconnection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("connectionFromArray()", function () {
  var letters = ["A", "B", "C", "D", "E"];

  describe("basic slicing", function () {
    it("returns all elements without filters", function () {
      var c = (0, _arrayconnection.connectionFromArray)(letters, {});
      return expect(c).toEqual({
        edges: [{
          next: "B",
          node: "A",
          previous: undefined
        }, {
          next: "C",
          node: "B",
          previous: "A"
        }, {
          next: "D",
          node: "C",
          previous: "B"
        }, {
          next: "E",
          node: "D",
          previous: "C"
        }, {
          next: undefined,
          node: "E",
          previous: "D"
        }],
        pageInfo: {
          hasNextPage: false
        }
      });
    });

    it("respects a smaller first", function () {
      var c = (0, _arrayconnection.connectionFromArray)(letters, { limit: 2 });
      return expect(c).toEqual({
        edges: [{
          node: "A",
          next: "B",
          previous: undefined
        }, {
          node: "B",
          next: "C",
          previous: "A"
        }],
        pageInfo: {
          hasNextPage: true
        }
      });
    });

    it("respects an overly large first", function () {
      var c = (0, _arrayconnection.connectionFromArray)(letters, { limit: 10 });
      return expect(c).toEqual({
        edges: [{
          next: "B",
          node: "A",
          previous: undefined
        }, {
          next: "C",
          node: "B",
          previous: "A"
        }, {
          next: "D",
          node: "C",
          previous: "B"
        }, {
          next: "E",
          node: "D",
          previous: "C"
        }, {
          next: undefined,
          node: "E",
          previous: "D"
        }],
        pageInfo: {
          hasNextPage: false
        }
      });
    });
  });

  describe("pagination", function () {
    it("respects limit and skip", function () {
      var c = (0, _arrayconnection.connectionFromArray)(letters, { limit: 2, skip: 2 });
      return expect(c).toEqual({
        edges: [{
          next: "D",
          node: "C",
          previous: "B"
        }, {
          next: "E",
          node: "D",
          previous: "C"
        }],
        pageInfo: {
          hasNextPage: true
        }
      });
    });

    it("respects limit and skip with large skip", function () {
      var c = (0, _arrayconnection.connectionFromArray)(letters, { limit: 10, skip: 2 });
      return expect(c).toEqual({
        edges: [{
          next: "D",
          node: "C",
          previous: "B"
        }, {
          next: "E",
          node: "D",
          previous: "C"
        }, {
          next: undefined,
          node: "E",
          previous: "D"
        }],
        pageInfo: {
          hasNextPage: false
        }
      });
    });
  });
});

describe("connectionFromPromisedArray()", function () {
  var letters = _promise2.default.resolve(["A", "B", "C", "D", "E"]);

  it("returns all elements without filters", (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var c;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _arrayconnection.connectionFromPromisedArray)(letters, {});

          case 2:
            c = _context.sent;
            return _context.abrupt("return", expect(c).toEqual({
              edges: [{
                next: "B",
                node: "A",
                previous: undefined
              }, {
                next: "C",
                node: "B",
                previous: "A"
              }, {
                next: "D",
                node: "C",
                previous: "B"
              }, {
                next: "E",
                node: "D",
                previous: "C"
              }, {
                next: undefined,
                node: "E",
                previous: "D"
              }],
              pageInfo: {
                hasNextPage: false
              }
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it("respects a smaller first", (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var c;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _arrayconnection.connectionFromPromisedArray)(letters, { limit: 2 });

          case 2:
            c = _context2.sent;
            return _context2.abrupt("return", expect(c).toEqual({
              edges: [{
                next: "B",
                node: "A",
                previous: undefined
              }, {
                next: "C",
                node: "B",
                previous: "A"
              }],
              pageInfo: {
                hasNextPage: true
              }
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));
});